#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
in vec3 LightDirection_tangentspace;
in vec3 EyeDirection_tangentspace;

out vec3 color;

uniform sampler2D DiffuseTexture;
uniform sampler2D NormalTexture;
uniform sampler2D SpecularTexture;
uniform mat4 V;
uniform mat4 M;
uniform mat3 MV3x3;
uniform vec3 LightPosition_worldspace;

void main()
{
	vec3 LightColor = vec3(0.75,0.75,1.0);
	float LightPower = 20.0f;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture(DiffuseTexture, UV).rgb;
	vec3 MaterialAmbientColor = vec3(0.1, 0.1, 0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3, 0.3, 1.0);
	//vec3 MaterialSpecularColor = texture( SpecularTexture, UV ).rgb * 0.3;

	// Local normal, in tangent space. V texture coordinate is inverted because normal map is in TGA (instead DDS) for better quality
	vec3 TextureNormal_tangentspace = normalize(texture(NormalTexture, vec2(UV.x,-UV.y)).rgb*2.0 - 1.0);

	// Distance to the light
	float distance = length(LightPosition_worldspace - Position_worldspace);

	// Normal of the computed fragment, in camera space
	//vec3 n = normalize(Normal_cameraspace);
	vec3 n = TextureNormal_tangentspace;

	// Direction of the light (from the fragment to the light)
	//vec3 l = normalize(LightDirection_cameraspace);
	vec3 l = normalize(LightDirection_tangentspace);

	// Cos of the angle between the normal and the light direction
	float cosTheta = clamp(dot(n, l), 0, 1);
	
	// Eye vector (to camera)
	//vec3 E = normalize(EyeDirection_cameraspace);
	vec3 E = normalize(EyeDirection_tangentspace);

	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l, n);

	// Cosine of the angle between the Eye vector and the Reflect vector
	float cosAlpha = clamp( dot( E,R ), 0, 1 );
	
	color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) + MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
}